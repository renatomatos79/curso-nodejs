model:
  schema, representacao das nossas "tabelas" *
  * quando falarmos de noSQL (nao relacional - Neo4J, OrientDB, MongoDB, Elastic, Kassandra *)
  layer, ou camada, para tráfego de dados entre a API e o Usuário Final (Requisições e Respostas)

controller:
  rotas das apis (endpoints ou "urls")

service:
  acesso a model é feita por meio de serviços (managers)

usuário -> request -> rota -> controller -> service -> model -> service -> controller -> response 
(http status code)

security -> controle de acesso
- autenticação: quem é voce? gero um token para identificação do usuário
  as características (properties) como email, nome, id, endereço são definidas em "Claims"
  já as roles são os papéis ou grupos de acesso, exemplo (operator, admin, user, etc)
  token: representação de uma sessão do usuário (coleção de claims formatada em base64)
  jwt: json web token (jwt.io) os campos de um token são separados por "." e cada campo está formatado em base64
  assinatura: é um campo que contém o resultado de um cálculo para saber se o token foi adulterado ou não (hash)
  um jwt possui alguns campos padrões como:
  subject -> sujeito ou usuário, pode ser um ID, login, email (sempre abreviado por sub)
  issuer  -> uma aplicação responsável pela geração do token (sempre abreviado por iss)
  type    -> tipo, no caso, jwt

  token:
	a requisição veio com a string abaixo
        ewoiaWQiOjMyLAoibmFtZSI6InZhbmVzc2EgbWF0b3MiLAoiYWdlIjo0MCwKImdlbmRlciI6Im1hbGUiCn0=

	decodificar a string
	{
		"id":2,
		"name":"vanessa matos",
		"age":40,
		"gender":"male",
		"role": "operator_level_1, report"
	}
	
	vou na base de dados e pego um campo que considero como sendo o saltkey do usuário 2 que é  o valor "123456"
	vou criar um novo objeto contendo o campo hash usando md5 do json da requisicao ja com saltkey
	{
		"id":2,
		"name":"vanessa matos",
		"age":40,
		"gender":"male",
		"saltkey": "123456",
		"hash": "f5540bc9b489745ac44a6e300c85c248"
	}
	
	devolvo o token para o usuário sem o saltkey 
	{
		"id":2,
		"name":"vanessa matos",
		"age":40,
		"gender":"male",
		"hash": "f5540bc9b489745ac44a6e300c85c248"
	}
	
	agora tenho um novo token a ser gerado 
	ewoJCSJpZCI6MiwKCQkibmFtZSI6InZhbmVzc2EgbWF0b3MiLAoJCSJhZ2UiOjQwLAoJCSJnZW5kZXIiOiJtYWxlIiwKCQkiaGFzaCI6ICJld29KQ1NKcFpDSTZNaXdLQ1FraWJtRnRaU0k2SW5aaGJtVnpjMkVnYldGMGIzTWlMQW9KQ1NKaFoyVWlPalF3TEFvSkNTSm5aVzVrWlhJaU9pSnRZV3hsSWl3S0NRa2lhR0Z6YUNJNklDSXhNak0wTlRZaUNnbDkiCgl9
		
	usuarios:

	id	name	email						saltkey
	1	renato	renato.matos79@gmail.com	142536
	2	vanessa vanessa@ig.com.br			123456 
	
	criptografias:
	sincronas: tem palavra chave para ida e volta 
	assincronas: so tem ida, ou seja, somente hash (md5)
	
	base64 não é criptografia, apenas formatação como json, xml, etc.

- autorização:
  para saber se o "user" pode ou não pode executar algo dentro do sistema 
  
  erros para um metodo protegido:
  1) não autenticado (401 Unauthorized)
  2) autenticado mas sem acesso (403 Forbidden)
  
  com o hash conseguimos evitar problemas do tipo 
  Cross-Site Request Forgery (CSRF) Prevention Cheat Sheet
  
  aonde enviamos o token?
  no header da requisição, ou cabeçalho.
  header temos um campo chamado authorization que em seguida possui um tipo "Bearer, oAuth, Basic"
  "authorization" : "Bearer ewoJCSJpZCI6MiwKCQkibmFtZSI6InZhbmVzc2EgbWF0b3MiLAoJCSJhZ2UiOjQwLAoJCSJnZW5kZXIiOiJtYWxlIiwKCQkiaGFzaCI6ICJld29KQ1NKcFpDSTZNaXdLQ1FraWJtRnRaU0k2SW5aaGJtVnpjMkVnYldGMGIzTWlMQW9KQ1NKaFoyVWlPalF3TEFvSkNTSm5aVzVrWlhJaU9pSnRZV3hsSWl3S0NRa2lhR0Z6YUNJNklDSXhNak0wTlRZaUNnbDkiCgl9"
  
  como ler o token?
  verificar se há no header um campo authorization
  tendo o campo authorization pegar o valor dele "Bearer ewoJCSJpZCI6MiwKCQkibmFtZSI6InZhbmVzc2EgbWF0b3MiLAoJCSJhZ2UiOjQwLAoJCSJnZW5kZXIiOiJtYWxlIiwKCQkiaGFzaCI6ICJld29KQ1NKcFpDSTZNaXdLQ1FraWJtRnRaU0k2SW5aaGJtVnpjMkVnYldGMGIzTWlMQW9KQ1NKaFoyVWlPalF3TEFvSkNTSm5aVzVrWlhJaU9pSnRZV3hsSWl3S0NRa2lhR0Z6YUNJNklDSXhNak0wTlRZaUNnbDkiCgl9"
  com o valor usar a funcao split(' ') que transformar uma string em um array de acordo com o caractere usado, neste caso, espaço em branco 
  value[0] = Bearer 
  value[1] = ewoJCSJpZCI6MiwKCQkibmFtZSI6InZhbmVzc2EgbWF0b3MiLAoJCSJhZ2UiOjQwLAoJCSJnZW5kZXIiOiJtYWxlIiwKCQkiaGFzaCI6ICJld29KQ1NKcFpDSTZNaXdLQ1FraWJtRnRaU0k2SW5aaGJtVnpjMkVnYldGMGIzTWlMQW9KQ1NKaFoyVWlPalF3TEFvSkNTSm5aVzVrWlhJaU9pSnRZV3hsSWl3S0NRa2lhR0Z6YUNJNklDSXhNak0wTlRZaUNnbDkiCgl9
  
  
  
  








